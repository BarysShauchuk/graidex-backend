// <auto-generated />
using System;
using Graidex.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Graidex.Infrastructure.Migrations
{
    [DbContext(typeof(GraidexDbContext))]
    partial class GraidexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Graidex.Domain.Models.Answers.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.ToTable("Answers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Graidex.Domain.Models.ChoiceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MultipleChoiceAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("MultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("MultipleChoiceQuestionId1")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SingleChoiceQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceAnswerId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.HasIndex("MultipleChoiceQuestionId1");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SingleChoiceQuestionId");

                    b.ToTable("ChoiceOption");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Graidex.Domain.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeLimit")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Graidex.Domain.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Users.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Users.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("Graidex.Domain.Models.Answers.Answer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasIndex("QuestionId");

                    b.ToTable("MultipleChoiceAnswer", (string)null);
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.OpenAnswer", b =>
                {
                    b.HasBaseType("Graidex.Domain.Models.Answers.Answer");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasIndex("QuestionId");

                    b.ToTable("OpenAnswer", (string)null);
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.SingleChoiceAnswer", b =>
                {
                    b.HasBaseType("Graidex.Domain.Models.Answers.Answer");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SingleChoiceAnswer", (string)null);
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("Graidex.Domain.Models.Questions.Question");

                    b.ToTable("MultipleChoiceQuestion", (string)null);
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.OpenQuestion", b =>
                {
                    b.HasBaseType("Graidex.Domain.Models.Questions.Question");

                    b.ToTable("OpenQuestion", (string)null);
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasBaseType("Graidex.Domain.Models.Questions.Question");

                    b.Property<int>("RightOptionId")
                        .HasColumnType("int");

                    b.HasIndex("RightOptionId");

                    b.ToTable("SingleChoiceQuestion", (string)null);
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.Answer", b =>
                {
                    b.HasOne("Graidex.Domain.Models.TestResult", "TestResult")
                        .WithMany("Answers")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("Graidex.Domain.Models.ChoiceOption", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Answers.MultipleChoiceAnswer", null)
                        .WithMany("Answers")
                        .HasForeignKey("MultipleChoiceAnswerId");

                    b.HasOne("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", null)
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceQuestionId");

                    b.HasOne("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", null)
                        .WithMany("RightOptions")
                        .HasForeignKey("MultipleChoiceQuestionId1");

                    b.HasOne("Graidex.Domain.Models.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Questions.SingleChoiceQuestion", null)
                        .WithMany("Options")
                        .HasForeignKey("SingleChoiceQuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.Question", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Subject", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Users.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Test", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Subject", "Subject")
                        .WithMany("Tests")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Graidex.Domain.Models.TestResult", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Users.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Test", "Test")
                        .WithMany("Results")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Users.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Answers.Answer", null)
                        .WithOne()
                        .HasForeignKey("Graidex.Domain.Models.Answers.MultipleChoiceAnswer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.OpenAnswer", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Answers.Answer", null)
                        .WithOne()
                        .HasForeignKey("Graidex.Domain.Models.Answers.OpenAnswer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Questions.OpenQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.SingleChoiceAnswer", b =>
                {
                    b.HasOne("Graidex.Domain.Models.ChoiceOption", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Answers.Answer", null)
                        .WithOne()
                        .HasForeignKey("Graidex.Domain.Models.Answers.SingleChoiceAnswer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.Questions.SingleChoiceQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.OpenQuestion", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Graidex.Domain.Models.Questions.OpenQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasOne("Graidex.Domain.Models.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Graidex.Domain.Models.Questions.SingleChoiceQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Graidex.Domain.Models.ChoiceOption", "RightOption")
                        .WithMany()
                        .HasForeignKey("RightOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RightOption");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Subject", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Graidex.Domain.Models.TestResult", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Users.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Answers.MultipleChoiceAnswer", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("RightOptions");
                });

            modelBuilder.Entity("Graidex.Domain.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
